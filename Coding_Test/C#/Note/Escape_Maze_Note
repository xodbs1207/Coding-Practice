미로 탈출

BFS, DFS 알고리즘에 대해 배움

DFS (Depth First Search - 깊이 우선 탐색)
- 재귀함수나 스택으로 구현

-- 탐색 시작 노드를 스택에 넣고 방문처리
-- 스택의 최상단 노드에 방문하지 않은 인접 노드가 하나라도있으면 스택에 넣고 방문처리, 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드 꺼내기
-- 위의 과정을 못 할때까지 무한 반복

- 반드시 방문(visit)검사 해야함
- 무한 깊이 막도록 깊이 제한(depth bound)
- 깊이 제한때까지 목표 못찾으면 백트래킹해서 새로운 자식 노드 생성

- 저장공간의 수요가 적음
- 노드가 깊은 곳에 있을 경우 빨리 찾을 수 있음

- 목표 노드가 없는데 깊이 빠질 수도 있음, 임의의 깊이 지정 탐색도 이럴때 쓸만함
- 구한 경로가 최단 경로가 아닐 가능성이 있음(목표에 다다르면 탐색이 끝나기 때문)



BFS (Breadth First Search - 너비 우선 탐색)
- 큐로 구현 ( 큐 자료구조 )

- 가장 가까운 노드부터 우선적으로 탐색

-- 탐색 시작 노드를 큐에 넣고 방문 처리
-- 큐에서 노드를 꺼내고 해당 노드의 인접 노드 중 방문 하지 않은 노드를 모두 큐에 넣고 방문 처리
-- 위의 과정을 반복

- 출발 노드에서 목표 노드까지 최단 길이 경로 보장

- 경로가 매우 길 경우 탐색 길이가 급격히 증가해 기억 공간이 많이필요
- 목표가 없을때 유한한 크기일 경우 모든 노드를 탐색한 후 실패함
- 무한한 크기일 경우 목표를 찾지 못하고, 끝내지도 못함

Queue.Enqueue(new int[]{x,y})
로 좌표 저장함

꺼낼때는 형변환하여
int[] 변수 = (int[])Queue.Dequeue()
그 후 변수[0] 식으로 꺼냈음

튜플에 대해 배움
선언 튜플(Tuple)
Tuple<int,int>()

일반 괄호 튜플(ValueTuple)
(int,int)

(int first, int second) 이름
으로 튜플.Item1 이름 대체 가능

각 튜플은 ToTuple(), ToValueTuple()로 변환 가능

List<(int first,int second)> visited = new List<(int,int)>();
리스트에 튜플도 집어넣어봄(이름 붙여서)

Queue 선언할 때
var q = new Queue<(int,int)>();
로 밸류 튜플 선언함


x, y를 실수로 바꿔넣어서 몇 시간동안 안되서 오류 찾고 포기할 뻔함..

